#!/bin/bash

###########################################################################################
REQUIRED_PKG="musl-tools"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $REQUIRED_PKG|grep "install ok installed")
echo Checking for $REQUIRED_PKG: $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "No $REQUIRED_PKG. Setting up $REQUIRED_PKG."
  sudo apt-get --yes install $REQUIRED_PKG
fi


REQUIRED_PKG="musl-dev"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $REQUIRED_PKG|grep "install ok installed")
echo Checking for $REQUIRED_PKG: $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "No $REQUIRED_PKG. Setting up $REQUIRED_PKG."
  sudo apt-get --yes install $REQUIRED_PKG
fi

REQUIRED_PKG="g++"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $REQUIRED_PKG|grep "install ok installed")
echo Checking for $REQUIRED_PKG: $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "No $REQUIRED_PKG. Setting up $REQUIRED_PKG."
  sudo apt-get --yes install $REQUIRED_PKG
fi
###########################################################################################


# Assemble source
nasm -f elf64 src.asm
mv src.o .src.o

# -s strip
# -fvisibility hides function symbols
# -O3 optimize for speed = complex disasm
# -Os optimize to make the smallest binary possible
# -funroll-loops unroll loop structure
# Compile staticlly no dynamic dependency
musl-gcc .src.o -static -s -O3 -fvisibility=hidden -funroll-loops -o sulla
strip -s sulla

# Compile Strip utility to remove section headers
# Source: https://github.com/antire-book/antire_book/tree/master/chap_3_format_hacks/stripBinary
# Remove secition header table
mv stripBinary.cpp .stripBinary.cpp
g++ .stripBinary.cpp -o stripbin
./stripbin sulla

# Swap endiness bit in elf header
printf '\x02' | dd conv=notrunc of=./sulla bs=1 seek=5

# Compile dummy target
gcc target.c -o target
